<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="_server_8qml" kind="file" language="C++">
    <compoundname>Server.qml</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">import<sp/>QtQuick<sp/>2.0</highlight></codeline>
<codeline><highlight class="normal">import<sp/>Nutmeg<sp/>1.0</highlight></codeline>
<codeline><highlight class="normal">import<sp/>&quot;Util.js&quot;<sp/>as<sp/>Util</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>\ingroup<sp/>clientApi</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Server<sp/>handles<sp/>requests<sp/>from<sp/>Nutmeg<sp/>clients.</highlight></codeline>
<codeline><highlight class="normal">*/</highlight></codeline>
<codeline><highlight class="normal">ServerBase<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>id:<sp/>server</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>objectName:<sp/>&quot;server&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>property<sp/>var<sp/>figureContainer:<sp/>null</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>property<sp/>var<sp/>tabView:<sp/>null</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>property<sp/>var<sp/>controller:<sp/>null</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>property<sp/>var<sp/>userArea:<sp/>null</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>onJsonReceived:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Msg:<sp/>{&quot;handle&quot;:<sp/>h,<sp/>&quot;data&quot;:<sp/>{props:<sp/>values},<sp/>&quot;parameter&quot;:<sp/>param}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processMessage(request)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>onBinaryReceived:<sp/>{<sp/>//<sp/>(msg,<sp/>data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>msg:<sp/>{&quot;handle&quot;:<sp/>h,<sp/>&quot;property&quot;:<sp/>prop,<sp/>&quot;parameter&quot;:<sp/>param}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Duck<sp/>punch<sp/>the<sp/>msg<sp/>and<sp/>pass<sp/>it<sp/>to<sp/>sendData</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>We<sp/>do<sp/>it<sp/>this<sp/>way<sp/>because<sp/>JSON<sp/>isn&apos;t<sp/>so<sp/>happy<sp/>with<sp/>converting<sp/>binary<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.data<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.data[msg.property]<sp/>=<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/>sendData(msg)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sendReply(JSON.stringify(result))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Handles<sp/>the<sp/>initial<sp/>request<sp/>message.<sp/>Selects<sp/>the<sp/>appropriate<sp/>server<sp/>command</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>execute<sp/>based<sp/>on<sp/>the<sp/>first<sp/>argument<sp/>in<sp/>the<sp/>message<sp/>`[&quot;command&quot;,<sp/>request={&quot;arg1&quot;:<sp/>val1,<sp/>&quot;arg2&quot;:<sp/>val2,<sp/>...}]`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>\return<sp/>Success:<sp/>`command(request)`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>\return<sp/>Unrecognized<sp/>command:<sp/>`[1,<sp/>{&quot;message&quot;:<sp/>m}]`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>processMessage(request)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>command<sp/>=<sp/>server[request[0]]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(typeof<sp/>command<sp/>!==<sp/>&quot;function&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(&quot;Command,<sp/>&quot;<sp/>+<sp/>request[0]<sp/>+<sp/>&quot;,<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>command.&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sendReply(JSON.stringify([1,<sp/>{&quot;message&quot;:<sp/>&quot;Unrecognized<sp/>command&quot;}]))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/>command(request[1])</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sendReply(JSON.stringify(result))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create<sp/>a<sp/>figure<sp/>based<sp/>on<sp/>the<sp/>parameters<sp/>provided<sp/>in<sp/>\a<sp/>args.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\param<sp/>type:dictionary<sp/>args:<sp/>{&quot;figureHandle&quot;:<sp/>f,<sp/>&quot;qml&quot;:<sp/>qmlString}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\param<sp/>figureHandle:<sp/>(String)<sp/>The<sp/>unique<sp/>handle<sp/>for<sp/>the<sp/>figure<sp/>being<sp/>created.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\param<sp/>qml:<sp/>(String)<sp/>QML<sp/>string<sp/>declaring<sp/>the<sp/>layout<sp/>of<sp/>the<sp/>figure.<sp/>See<sp/>more<sp/>in<sp/>().</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\return<sp/>Success:<sp/>`[0,<sp/>{&quot;figureHandle&quot;:<sp/>f,<sp/>&quot;port&quot;:<sp/>parameterUpdatePort,<sp/>&quot;message&quot;:<sp/>m}]`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\return<sp/>QML<sp/>Failure:<sp/>`[2,<sp/>{&quot;lineNumber&quot;:<sp/>l,<sp/>&quot;columnNumber&quot;:<sp/>c,<sp/>&quot;message&quot;:<sp/>m}]`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>createFigure(args)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>figureHandle<sp/>=<sp/>args.figureHandle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qml<sp/>=<sp/>args.qml</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qml<sp/>=<sp/>&quot;import<sp/>QtQuick<sp/>2.1\nimport<sp/>Nutmeg<sp/>1.0\nimport<sp/>\&quot;Layouts\&quot;<sp/>as<sp/>Layouts\nimport<sp/>QtQuick.Layouts<sp/>1.1\n&quot;<sp/>+<sp/>qml</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Figure<sp/>handles<sp/>must<sp/>be<sp/>unique,<sp/>overwrite<sp/>existing<sp/>handles</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>oldFigure<sp/>=<sp/>controller.get(figureHandle)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>fig</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!oldFigure<sp/>||<sp/>oldFigure.qml<sp/>!==<sp/>qml)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(oldFigure)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(oldFigure.guiItem)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldFigure.guiItem.destroy()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tabView.closeFigure(oldFigure)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>par<sp/>=<sp/>figureContainer<sp/>?<sp/>figureContainer<sp/>:<sp/>server</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fig<sp/>=<sp/>Qt.createQmlObject(qml,<sp/>par,<sp/>&quot;Figures&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fig.qml<sp/>=<sp/>qml</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(e)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Offset<sp/>for<sp/>the<sp/>added<sp/>lines...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>err<sp/>=<sp/>e.qmlErrors[0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>line<sp/>=<sp/>qml.split(&quot;\n&quot;)[err.lineNumber<sp/>-<sp/>1]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err.message<sp/>+=<sp/>&quot;\n&quot;<sp/>+<sp/>line<sp/>+<sp/>&quot;\n&quot;<sp/>+<sp/>Array(err.columnNumber).join(&quot;<sp/>&quot;)<sp/>+<sp/>&quot;^&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err.lineNumber<sp/>-=<sp/>4</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.warn(&quot;At<sp/>line&quot;,<sp/>err.lineNumber<sp/>+<sp/>&quot;,<sp/>col&quot;,<sp/>err.columnNumber<sp/>+<sp/>&quot;:&quot;,<sp/>err.message)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[2,<sp/>err]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Update<sp/>the<sp/>figure<sp/>handle<sp/>if<sp/>one<sp/>was<sp/>provided</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(figureHandle.length<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fig.handle<sp/>=<sp/>figureHandle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tabView.addFigure(fig)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fig.controller<sp/>=<sp/>controller</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fig<sp/>=<sp/>oldFigure</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>port<sp/>=<sp/>getPortForFigure(figureHandle)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(&quot;Figure&apos;s<sp/>port:&quot;,<sp/>port)</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fig.installEventFilterApp(rootApp)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[0,<sp/>{&quot;figureHandle&quot;:<sp/>fig.handle,<sp/>&quot;port&quot;:<sp/>port,<sp/>&quot;message&quot;:<sp/>&quot;Figure<sp/>created<sp/>successfully.&quot;}]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Layout<sp/>parameter<sp/>controls<sp/>based<sp/>on<sp/>the<sp/>parameters<sp/>provided<sp/>in<sp/>\p<sp/>args.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\param<sp/>type:dictionary<sp/>args:<sp/>A<sp/>dictionary<sp/>of<sp/>args.<sp/>{&quot;figureHandle&quot;:<sp/>f,<sp/>&quot;qml&quot;:<sp/>qml]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\param<sp/>figureHandle:<sp/>(String)<sp/>The<sp/>unique<sp/>identifier<sp/>of<sp/>the<sp/>new<sp/>figure</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\param<sp/>qml:<sp/>(String)<sp/>Should<sp/>describe<sp/>the<sp/>layout<sp/>of<sp/>the<sp/>controls<sp/>used<sp/>for</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adjusting<sp/>parameter<sp/>values<sp/>related<sp/>to<sp/>\p<sp/>figureHandle.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\return<sp/>Success:<sp/>`[0,<sp/>{&quot;message&quot;:<sp/>m,<sp/>&quot;parameters&quot;:<sp/>p}]`<sp/>\n</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\return<sp/>Bad<sp/>\p<sp/>figureHandle:<sp/>`[3,<sp/>{&quot;message&quot;:<sp/>m}]`<sp/>\n</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\return<sp/>QML<sp/>Failure:<sp/>`[4,<sp/>{&quot;lineNumber&quot;:<sp/>l,<sp/>&quot;columnNumber&quot;:<sp/>c,<sp/>&quot;message&quot;:<sp/>m}]`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>createGui(args)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>figureHandle<sp/>=<sp/>args.figureHandle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qml<sp/>=<sp/>args.qml</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>reply<sp/>=<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>figure<sp/>=<sp/>controller.get(figureHandle)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!figure<sp/>||<sp/>figure.objectName<sp/>!==<sp/>&quot;figure&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reply.message<sp/>=<sp/>&quot;Unable<sp/>to<sp/>find<sp/>figure,<sp/>&quot;<sp/>+<sp/>handle<sp/>+<sp/>&quot;.<sp/>GUI<sp/>requires<sp/>a<sp/>valid<sp/>figure<sp/>to<sp/>attach<sp/>to.&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[3,<sp/>reply]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qml<sp/>=<sp/>&quot;import<sp/>QtQuick<sp/>2.1\nimport<sp/>Nutmeg<sp/>1.0\nimport<sp/>\&quot;Controls\&quot;\n&quot;<sp/>+<sp/>qml</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>gui</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui<sp/>=<sp/>Qt.createQmlObject(qml,<sp/>userArea,<sp/>&quot;GUIs&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(e)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Offset<sp/>for<sp/>the<sp/>added<sp/>lines...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.qmlErrors[0].lineNumber<sp/>-=<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[4,<sp/>e.qmlErrors[0]]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>figure.guiItem<sp/>=<sp/>gui</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui.visible<sp/>=<sp/>Qt.binding(function()<sp/>{<sp/>return<sp/>figure.visible<sp/>})</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui.server<sp/>=<sp/>server</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gui.figureHandle<sp/>=<sp/>figureHandle</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>parameters<sp/>=<sp/>({})</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(var<sp/>p<sp/>in<sp/>gui.parameters)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>control<sp/>=<sp/>gui.parameters[p]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters[p]<sp/>=<sp/>control.value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reply.message<sp/>=<sp/>&quot;GUI<sp/>created<sp/>successfully.&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reply.parameters<sp/>=<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[0,<sp/>reply]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Check<sp/>whether<sp/>the<sp/>given<sp/>full<sp/>handle<sp/>is<sp/>valid.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\param<sp/>type:string<sp/>handle:<sp/>Full<sp/>handle<sp/>to<sp/>any<sp/>Nutmeg<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\return<sp/>Valid:<sp/>`[0,<sp/>{&quot;message&quot;:<sp/>m}]`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\return<sp/>Invalid:<sp/>`[6,<sp/>{&quot;message&quot;:<sp/>m}]`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>handleValid(args)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>handle<sp/>=<sp/>args.handle</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>obj<sp/>=<sp/>controller.get(handle)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((Util.isArray(obj)<sp/>&amp;&amp;<sp/>obj.length<sp/>&gt;<sp/>0))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[0,<sp/>{&quot;message&quot;:<sp/>&quot;Object,<sp/>&quot;<sp/>+<sp/>handle<sp/>+<sp/>&quot;,<sp/>is<sp/>valid.&quot;}]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[6,<sp/>{&quot;message&quot;:<sp/>&quot;Object,<sp/>&quot;<sp/>+<sp/>handle<sp/>+<sp/>&quot;,<sp/>is<sp/>invalid.&quot;}]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Find<sp/>and<sp/>return<sp/>the<sp/>full<sp/>handle<sp/>of<sp/>the<sp/>child<sp/>of<sp/>\a<sp/>parentHandle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>handle,<sp/>\a<sp/>childHandle.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\param<sp/>type:string<sp/>parentHandle:<sp/>The<sp/>full<sp/>handle<sp/>of<sp/>a<sp/>figure<sp/>or<sp/>axis.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\param<sp/>type:string<sp/>childHandle:<sp/>The<sp/>handle<sp/>name<sp/>of<sp/>the<sp/>child.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\return<sp/>Success:<sp/>`[0,<sp/>{&quot;message&quot;:<sp/>m,<sp/>&quot;fullHandle&quot;:<sp/>h}]`<sp/>\n</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>findChild(args)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>parentHandle<sp/>=<sp/>args.parentHandle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>childHandle<sp/>=<sp/>args.childHandle</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[-1,<sp/>{&quot;message&quot;:<sp/>&quot;Method<sp/>not<sp/>implemented&quot;,<sp/>&quot;fullHandle&quot;:<sp/>parentHandle<sp/>+<sp/>&quot;.&quot;<sp/>+<sp/>childHandle}]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*!</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sets<sp/>the<sp/>data<sp/>or<sp/>properties<sp/>of<sp/>`plotHandle`<sp/>according<sp/>the<sp/>values<sp/>stored<sp/>in<sp/>`dataDict`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Multiple<sp/>objects<sp/>can<sp/>be<sp/>referenced<sp/>using<sp/>Python-style<sp/>pretty<sp/>indexing<sp/>(see<sp/>below).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>a<sp/>single<sp/>set<sp/>of<sp/>data,<sp/>\p<sp/>dataList<sp/>should<sp/>be<sp/>a<sp/>1D<sp/>list.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>a<sp/>multiple<sp/>sets<sp/>of<sp/>data<sp/>destined<sp/>for<sp/>multiple<sp/>axes<sp/>or<sp/>plots,<sp/>\p<sp/>dataList</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>should<sp/>be<sp/>a<sp/>2D<sp/>list,<sp/>regardless<sp/>of<sp/>the<sp/>number<sp/>of<sp/>data<sp/>points.<sp/>Where<sp/>the<sp/>first<sp/>dimension</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contains<sp/>a<sp/>list<sp/>for<sp/>each<sp/>dataset.<sp/>In<sp/>the<sp/>following<sp/>example,<sp/>a<sp/>figure<sp/>has<sp/>an<sp/>axis<sp/>group</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>3<sp/>(so<sp/>they<sp/>have<sp/>the<sp/>same<sp/>handle).<sp/>Each<sp/>axis<sp/>contains<sp/>a<sp/>line<sp/>plot<sp/>with<sp/>the<sp/>handle<sp/>&quot;myData&quot;:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/><sp/><sp/><sp/>[<sp/>&quot;sendData&quot;,<sp/>&quot;myFigure.axes[0:3].myData&quot;,<sp/>{&quot;x&quot;:<sp/>[0,1,2],<sp/>&quot;y&quot;:<sp/>[<sp/>[2,4,1],<sp/>[9,1,0],<sp/>[1,2,3]<sp/>]}<sp/>]</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\param<sp/>type:List<sp/>req<sp/>Request:<sp/>[&quot;sendData&quot;,<sp/>handle,<sp/>dataDict,<sp/>parameter<sp/>(optional)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\param<sp/>type:string<sp/>handle<sp/>The<sp/>hierarchical<sp/>handle<sp/>to<sp/>the<sp/>plot<sp/>of<sp/>interest</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(e.g.<sp/>`myFigure.axis[0].experiment1Data`)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\param<sp/>type:dict<sp/>dataDict<sp/>The<sp/>data<sp/>dictionary<sp/>should<sp/>contain<sp/>one<sp/>or<sp/>both<sp/>of<sp/>`&quot;x&quot;`<sp/>and<sp/>`&quot;y&quot;`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>for<sp/>a<sp/>2D<sp/>plot<sp/>(e.g.<sp/>`{&quot;x&quot;:<sp/>[0,1,2],<sp/>&quot;y&quot;:<sp/>[2,4,1]}`)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\param<sp/>type:string<sp/>parameter<sp/>Optional<sp/>argument<sp/>which<sp/>informs<sp/>the<sp/>server<sp/>which<sp/>changing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter<sp/>that<sp/>this<sp/>update<sp/>is<sp/>in<sp/>response<sp/>to.<sp/>See<sp/>Socket<sp/>Architecture<sp/>for<sp/>details</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\return<sp/>Success:<sp/>`[0,<sp/>{&quot;message&quot;:<sp/>m}]`<sp/>\n</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\return<sp/>Bad<sp/>Property:<sp/>`[5,<sp/>{&quot;message&quot;:<sp/>m}]`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>sendData(args)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>handle<sp/>=<sp/>args.handle,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>args.data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameter<sp/>=<sp/>args.parameter</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>Match:<sp/>(foo.bar.)extra</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>match<sp/>=<sp/>handle.match(/(.*?)\./)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>figureHandle<sp/>=<sp/>match<sp/>?<sp/>match[1]<sp/>:<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(&quot;SendData&quot;,<sp/>match,<sp/>figureHandle,<sp/>parameter)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(figureHandle<sp/>&amp;&amp;<sp/>parameter)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>server.parameterUpdated(figureHandle,<sp/>parameter)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>obj<sp/>=<sp/>controller.get(handle)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!obj)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[6,<sp/>{&quot;message&quot;:<sp/>&quot;Object,<sp/>&quot;<sp/>+<sp/>handle<sp/>+<sp/>&quot;,<sp/>does<sp/>not<sp/>exist.&quot;}]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(var<sp/>prop<sp/>in<sp/>data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>props<sp/>=<sp/>prop.split(&quot;.&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>realHandle<sp/>=<sp/>[handle].concat(props.slice(0,<sp/>-1)).join(&quot;.&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>realObj<sp/>=<sp/>controller.get(realHandle)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>realProp<sp/>=<sp/>props[props.length<sp/>-<sp/>1]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/>setProperties(realObj,<sp/>realProp,<sp/>data[prop])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!result)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[5,<sp/>{&quot;message&quot;:<sp/>&quot;Property,<sp/>&quot;<sp/>+<sp/>prop<sp/>+<sp/>&quot;,<sp/>of<sp/>&quot;<sp/>+<sp/>handle<sp/>+<sp/>&quot;<sp/>cannot<sp/>be<sp/>set.&quot;}]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[0,<sp/>{&quot;message&quot;:<sp/>&quot;Data<sp/>updated<sp/>successfully.&quot;}]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>function<sp/>setProperties(obj,<sp/>prop,<sp/>data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>Takes<sp/>an<sp/>obj<sp/>or<sp/>array<sp/>of<sp/>objects<sp/>and<sp/>sets<sp/>its/their<sp/>properties<sp/>according<sp/>to<sp/>prop<sp/>+<sp/>data<sp/>*/</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(&quot;SetProperties&quot;,<sp/>obj,<sp/>prop,<sp/>JSON.stringify(data))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!obj)<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Util.isArray(obj))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(var<sp/>i=0;<sp/>i&lt;obj.length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>d<sp/>=<sp/>Util.isArray(data)<sp/>&amp;&amp;<sp/>Util.isArray(data[i])<sp/>?<sp/>data[i]<sp/>:<sp/>data</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(obj[i])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/>setProperties(obj[i],<sp/>prop,<sp/>d)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!result)<sp/>return<sp/>false</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>if<sp/>the<sp/>property<sp/>is<sp/>valid</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(&quot;Setting<sp/>property&quot;,<sp/>prop,<sp/>&quot;for&quot;,<sp/>obj)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(typeof<sp/>obj.mapProperty<sp/>!=<sp/>&apos;function&apos;)<sp/>return<sp/>false</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>propName<sp/>=<sp/>obj.mapProperty(prop)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(&quot;Propname<sp/>from<sp/>prop:&quot;,<sp/>propName)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!propName)<sp/>return<sp/>false</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[propName]<sp/>=<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(&quot;Done&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/kitham/projects/qt/nutmeg/qml/Server.qml"/>
  </compounddef>
</doxygen>
